load("@gazelle//:def.bzl", "gazelle")
load("@rules_go//go:def.bzl", "go_library", "go_test")
load("helper.bzl", "cross_compile_binary")
load("platforms.bzl", "PLATFORMS")

# Name of the binary
NAME = "smart-dns-updater"

# gazelle:prefix github.com/imeyer/smart-dns-updater
gazelle(name = "gazelle")

go_library(
    name = "{}_lib".format(NAME),
    srcs = ["main.go"],
    importpath = "github.com/imeyer/{}".format(NAME),
    visibility = ["//visibility:private"],
    x_defs = {
        "version": "{STABLE_VERSION}",
        "gitSha": "{STABLE_GIT_SHA}",
    },
    deps = [
        "@com_github_burntsushi_toml//:toml",
        "@com_github_miekg_dns//:dns",
        "@com_github_prometheus_client_golang//prometheus",
        "@com_github_prometheus_client_golang//prometheus/promhttp",
        "@org_golang_google_api//dns/v1:dns",
    ],
)

# Create go_binary targets for each platform-arch combination
[cross_compile_binary(
    name = NAME,
    goarch = goarch,
    goos = goos,
) for (goos, goarch) in PLATFORMS]

go_test(
    name = "{}_test".format(NAME),
    size = "small",
    srcs = ["main_test.go"],
    embed = [":{}_lib".format(NAME)],
    deps = [
        "@com_github_miekg_dns//:dns",
        "@com_github_stretchr_testify//assert",
        "@com_github_stretchr_testify//mock",
        "@com_github_stretchr_testify//require",
    ],
)
